/// @file
/// @brief Virtual Machine C++ headers

#ifndef _H_BCX
#define _H_BCX

#include <iostream>
using namespace std;

/// @defgroup vm Virtual Machine
/// @{

/// program/data memory size
#define Msz 0x1000

/// flat memory for program & data
extern uint8_t M[Msz];

/// instruction pointer
extern uint32_t Ip;

/// opcode of current command
extern uint8_t op;

/// Virtual Machine loop (bytecode interpreter)
extern void VM(void);

/// @defgroup cmd commands
/// @{

/// `NOP` : NO Operation , do nothing
extern void NOP(void);
/// `HALT` : stop the system
extern void HALT(void);

/// @defgroup op Opcodes
/// @{

/// @ref NOP
#define OP_NOP		0x00

/// @ref HALT
#define OP_HALT		0xFF

/// @}

/// @}

/// @}

/// @defgroup compiler Compiler
/// @{

/// compiler pointer
extern uint32_t Cp;

/// @defgroup parser Syntax parser interface
/// @{

/// @name lexer interface [lex/flex]
/// @{

/// get next token from source code stream
extern int yylex();
/// current line number @see lexer `%option yylineno`
extern int yylineno;
/// current lexeme matched
extern char* yytext;

/// @}

/// @name token macro
/// @{

/// `CMD0` zero parameters command
#define C0(X) { yylval.cmd0 = X; return CMD0; }

/// @}

/// @name parser interface [yacc/bison]
/// @{

extern int yyparse();

/// syntax error callback
extern void yyerror(const char*);

// tokens definitions generated by yacc
#include "ypp.tab.hpp"

/// @}

/// @}

/// @}

#endif // _H_BCX

